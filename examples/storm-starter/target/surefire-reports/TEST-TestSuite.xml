<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="TestSuite" time="0.379" tests="226" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-7-oracle/jre/lib/amd64"/>
    <property name="java.vm.version" value="24.80-b11"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/home/lexu/workspace/Storm-with-Experiments/examples/storm-starter"/>
    <property name="java.runtime.version" value="1.7.0_80-b15"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-7-oracle/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/share/maven/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="51.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="3.13.0-96-generic"/>
    <property name="user.home" value="/home/lexu"/>
    <property name="user.timezone" value="America/Chicago"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.specification.version" value="1.7"/>
    <property name="user.name" value="lexu"/>
    <property name="java.class.path" value="/usr/share/maven/boot/plexus-classworlds-2.x.jar"/>
    <property name="java.vm.specification.version" value="1.7"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/lib/jvm/java-7-oracle/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher clean package"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.7.0_80"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-7-oracle/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-7-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-7-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-7-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-7-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-7-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-7-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-7-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-7-oracle/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="maven.home" value="/usr/share/maven"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0.2"/>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0.001"/>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0.001"/>
  <testcase name="positiveEmitFrequencyShouldBeOk" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0.002"/>
  <testcase name="positiveEmitFrequencyShouldBeOk" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="positiveEmitFrequencyShouldBeOk" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="positiveEmitFrequencyShouldBeOk" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="positiveTopNShouldBeOk" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="positiveTopNShouldBeOk" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="positiveTopNShouldBeOk" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="positiveTopNShouldBeOk" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0.074"/>
  <testcase name="shouldEmitNothingIfNormalTupleIsReceived" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0.019"/>
  <testcase name="shouldEmitSomethingIfTickTupleIsReceived" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0.003"/>
  <testcase name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" classname="storm.starter.bolt.IntermediateRankingsBoltTest" time="0.007"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.starter.bolt.RollingCountBoltTest" time="0.002"/>
  <testcase name="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived" classname="storm.starter.bolt.RollingCountBoltTest" time="0.031"/>
  <testcase name="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived" classname="storm.starter.bolt.RollingCountBoltTest" time="0.001"/>
  <testcase name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" classname="storm.starter.bolt.RollingCountBoltTest" time="0.001"/>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroEmitFrequencyShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="negativeOrZeroTopNShouldThrowIAE" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="positiveEmitFrequencyShouldBeOk" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="positiveEmitFrequencyShouldBeOk" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="positiveEmitFrequencyShouldBeOk" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0.001"/>
  <testcase name="positiveEmitFrequencyShouldBeOk" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="positiveTopNShouldBeOk" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="positiveTopNShouldBeOk" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0.001"/>
  <testcase name="positiveTopNShouldBeOk" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="positiveTopNShouldBeOk" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="shouldEmitNothingIfNormalTupleIsReceived" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0.005"/>
  <testcase name="shouldEmitSomethingIfTickTupleIsReceived" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" classname="storm.starter.bolt.TotalRankingsBoltTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="newInstanceShouldHaveEmptyCounts" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.starter.tools.SlidingWindowCounterTest" time="0.001"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.starter.tools.SlidingWindowCounterTest" time="0.001"/>
  <testcase name="twoOrMoreSlotsShouldBeValid" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="twoOrMoreSlotsShouldBeValid" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="twoOrMoreSlotsShouldBeValid" classname="storm.starter.tools.SlidingWindowCounterTest" time="0"/>
  <testcase name="negativeOrZeroNumTimesToTrackShouldThrowIAE" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="negativeOrZeroNumTimesToTrackShouldThrowIAE" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0.001"/>
  <testcase name="negativeOrZeroNumTimesToTrackShouldThrowIAE" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="negativeOrZeroNumTimesToTrackShouldThrowIAE" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="negativeOrZeroNumTimesToTrackShouldThrowIAE" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="positiveNumTimesToTrackShouldBeOk" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="positiveNumTimesToTrackShouldBeOk" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="positiveNumTimesToTrackShouldBeOk" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="positiveNumTimesToTrackShouldBeOk" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0.001"/>
  <testcase name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0.003"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0.001"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0.001"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0.001"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" classname="storm.starter.tools.NthLastModifiedTimeTrackerTest" time="0"/>
  <testcase name="negativeOrZeroNumSlotsShouldThrowIAE" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="negativeOrZeroNumSlotsShouldThrowIAE" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="negativeOrZeroNumSlotsShouldThrowIAE" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="negativeOrZeroNumSlotsShouldThrowIAE" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="negativeOrZeroNumSlotsShouldThrowIAE" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="newInstanceShouldHaveEmptyCounts" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="positiveNumSlotsShouldBeOk" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="positiveNumSlotsShouldBeOk" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="positiveNumSlotsShouldBeOk" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="positiveNumSlotsShouldBeOk" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="shouldIncrementCount" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="shouldIncrementCountOnlyOneSlotAtATime" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="shouldReturnNonEmptyCountsWhenAtLeastOneObjectWasCounted" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="shouldReturnZeroForNonexistentObject" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="wipeSlotShouldSetAllCountsInSlotToZero" classname="storm.starter.tools.SlotBasedCounterTest" time="0"/>
  <testcase name="wipeZerosShouldRemoveAnyObjectsWithZeroTotalCount" classname="storm.starter.tools.SlotBasedCounterTest" time="0.001"/>
  <testcase name="constructorWithNegativeCountAndFieldsShouldThrowIAE" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="constructorWithNegativeCountAndNoFieldsShouldThrowIAE" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="constructorWithNullObjectAndFieldsShouldThrowIAE" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="constructorWithNullObjectAndNoFieldsShouldThrowIAE" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="copyShouldReturnCopy" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="copyShouldReturnCopy" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="copyShouldReturnCopy" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="fieldsShouldBeImmutable" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldBeEqualToItself" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldBeEqualToTrueDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0.001"/>
  <testcase name="shouldBeEqualToTrueDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldBeEqualToTrueDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0.001"/>
  <testcase name="shouldCreateRankableObjectFromTuple" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0.002"/>
  <testcase name="shouldHaveDifferentHashCodeThanFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldHaveDifferentHashCodeThanFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldHaveDifferentHashCodeThanFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldHaveDifferentHashCodeThanFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldHaveDifferentHashCodeThanFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldHaveDifferentHashCodeThanFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldHaveSameHashCodeAsTrueDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldHaveSameHashCodeAsTrueDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldHaveSameHashCodeAsTrueDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0.001"/>
  <testcase name="shouldNotBeEqualToFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldNotBeEqualToFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldNotBeEqualToFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldNotBeEqualToFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldNotBeEqualToFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldNotBeEqualToFalseDuplicates" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldNotBeEqualToInstancesOfOtherClasses" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldNotBeEqualToInstancesOfOtherClasses" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0.001"/>
  <testcase name="shouldNotBeEqualToInstancesOfOtherClasses" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldNotBeEqualToInstancesOfOtherClasses" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldReturnTheCount" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldReturnTheFields" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldReturnTheFields" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="shouldReturnTheObject" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="toStringShouldContainStringRepresentationsOfObjectAndCount" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="toStringShouldContainStringRepresentationsOfObjectAndCount" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0.001"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="verifyCompareTo" classname="storm.starter.tools.RankableObjectWithFieldsTest" time="0"/>
  <testcase name="constructorWithNegativeOrZeroTopNShouldThrowIAE" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="constructorWithNegativeOrZeroTopNShouldThrowIAE" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="constructorWithNegativeOrZeroTopNShouldThrowIAE" classname="storm.starter.tools.RankingsTest" time="0.001"/>
  <testcase name="constructorWithNegativeOrZeroTopNShouldThrowIAE" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="constructorWithPositiveTopNShouldBeOk" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="constructorWithPositiveTopNShouldBeOk" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="constructorWithPositiveTopNShouldBeOk" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="constructorWithPositiveTopNShouldBeOk" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyConstructorShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0.001"/>
  <testcase name="copyConstructorShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyConstructorShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyConstructorShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyConstructorShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyConstructorShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyConstructorShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0.001"/>
  <testcase name="copyConstructorShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyConstructorShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyConstructorShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyConstructorShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0.001"/>
  <testcase name="copyShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyShouldReturnCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0.001"/>
  <testcase name="copyShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="copyShouldReturnDefensiveCopy" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="defaultConstructorShouldSetPositiveTopN" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" classname="storm.starter.tools.RankingsTest" time="0.001"/>
  <testcase name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenUpdatedWithRankables" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenUpdatedWithRankables" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenUpdatedWithRankables" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldCorrectlyRankWhenUpdatedWithRankables" classname="storm.starter.tools.RankingsTest" time="0.001"/>
  <testcase name="shouldHaveDefaultConstructor" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldNotRankDuplicateObjectsMoreThanOnce" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldNotRankDuplicateObjectsMoreThanOnce" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldRemoveZeroCounts" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldRemoveZeroCounts" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldRemoveZeroCounts" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldRemoveZeroCounts" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldRemoveZeroCounts" classname="storm.starter.tools.RankingsTest" time="0.001"/>
  <testcase name="shouldRemoveZeroCounts" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="shouldRemoveZeroCounts" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="sizeOfRankingsShouldNotGrowBeyondTopN" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="sizeOfRankingsShouldNotGrowBeyondTopN" classname="storm.starter.tools.RankingsTest" time="0"/>
  <testcase name="updatingWithNewRankablesShouldBeThreadSafe" classname="storm.starter.tools.RankingsTest" time="0.025"/>
</testsuite>